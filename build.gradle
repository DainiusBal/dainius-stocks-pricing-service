plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'org.openapi.generator' version '7.2.0'
}

group = 'com.balionis.dainius.sps'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.VERSION_17
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	testImplementation 'org.liquibase:liquibase-core:4.21.1'
	implementation 'mysql:mysql-connector-java:8.0.28'

	testImplementation 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
	testImplementation 'io.rest-assured:rest-assured:4.4.0'
	testImplementation 'org.springframework:spring-test'
	testImplementation 'org.mock-server:mockserver-netty:5.11.2'
	testImplementation 'org.mock-server:mockserver-client-java:5.11.2'

	implementation("io.swagger.core.v3:swagger-annotations:2.2.20")
	implementation("javax.validation:validation-api:2.0.1.Final")
	implementation("javax.annotation:javax.annotation-api:1.3.2")
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir("jacoco-html")
	}

	dependsOn(tasks.test)
}


tasks.register('liquibaseUpdate', JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	mainClass = 'liquibase.integration.commandline.Main'
	args '--changeLogFile=src/main/resources/db/changelog/db.changelog-master.yaml',
			'--url=jdbc:mysql://localhost:3306/dainius_db',
			'--username=root',
			'--password=1234',
			'--driver=com.mysql.cj.jdbc.Driver',
			'update'
}


tasks.register('liquibaseStatus', JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	mainClass = 'liquibase.integration.commandline.Main'

	args '--changeLogFile=src/main/resources/db/changelog/db.changelog-master.yaml',
			'--url=jdbc:mysql://localhost:3306/dainius_db',
			'--username=root',
			'--password=1234',
			'--driver=com.mysql.cj.jdbc.Driver',
			'status'
}

tasks.register('liquibaseRollbackOne', JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	mainClass = 'liquibase.integration.commandline.Main'
	args '--changeLogFile=src/main/resources/db/changelog/db.changelog-master.yaml',
			'--url=jdbc:mysql://localhost:3306/dainius_db',
			'--username=root',
			'--password=1234',
			'--driver=com.mysql.cj.jdbc.Driver',
			'rollbackCount',
			'1'
}

openApiValidate {
	inputSpec = "$rootDir/openapi/openapi.yaml"
}

openApiGenerate {
	generatorName = "spring"
	inputSpec = "$rootDir/openapi/openapi.yaml"
	outputDir = "$buildDir/generated"
	apiPackage = "com.balionis.dainius.sps.generated.api"
	modelPackage= "com.balionis.dainius.sps.generated.model"
	configOptions.set([
			"dateLibrary": "java8",
			"generateApis": "true",
			"generateApiTests": "false",
			"generateModels": "true",
			"generateModelTests": "false",
			"generateModelDocumentation": "false",
			"generateSupportingFiles": "false",
			"hideGenerationTimestamp": "true",
			"interfaceOnly": "true",
			"library": "spring-boot",
			"serializableModel": "true",
			"useBeanValidation": "true",
			"useTags": "true",
			"implicitHeaders": "true",
			"openApiNullable": "false",
			"oas3": "true"
	])
}

tasks.compileJava {
	dependsOn(tasks.openApiValidate, tasks.openApiGenerate)
}

sourceSets {
	main {
		java {
			srcDirs("$buildDir/generated/src/main/java")
		}
	}
}

tasks.register('dockerBuild', Exec) {
	dependsOn('bootJar')

	description = "Build a service docker image"
	group = "Docker"
	commandLine 'docker', 'build', '-t', "${project.name}:latest", "."
}

tasks.register("dockerComposeUp") {
	description = "Start a service on local docker"
	group = "Docker"
	doLast {
		exec {
			commandLine "docker-compose", "-f", "docker-compose.yaml", "up", "-d"
		}
	}
}


tasks.register('dockerComposeDown') {
	description = "Stop a service on local docker"
	group = "Docker"
	doLast {
		exec {
			commandLine "docker-compose", "-f", "docker-compose.yaml", "down"
		}
	}
}

















